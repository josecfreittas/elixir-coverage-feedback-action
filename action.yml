name: "Elixir Coverage"
description: "Action to run tests, check coverage, and send a feedback message to the pull request."

branding:
  icon: "message-square"
  color: "purple"

inputs:
  github_token:
    description: "GitHub token"
    required: true
  coverage_tool:
    description: "Coverage tool"
    default: "default"
    required: false
  coverage_threshold:
    description: “Coverage threshold”
    default: 90
    required: false

runs:
  using: "composite"
  steps:
    - name: Tests and coverage
      id: tests
      shell: bash
      run: if mix test --cover 2>&1 | tee coverage_report.log; then echo 'success running the tests'; fi
    - name: Extract branch name
      shell: bash
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      id: extract_branch
    - name: Cache NPM
      uses: actions/cache@v3
      with:
        path: |
          deps
          _build
        key: npm-${{ hashFiles('**/feedback.mjs') }}
    - name: Print env
      shell: bash
      run: env
    - name: Feedback comment
      shell: bash
      env:
        github_token: ${{ inputs.github_token }}
        coverage_tool: ${{ inputs.coverage_tool }}
        coverage_threshold: ${{ inputs.coverage_threshold }}
        default_branch: ${{ github.event.repository.default_branch }}
        current_branch: ${{ steps.extract_branch.outputs.branch }}
        run_id: ${{ github.run_id }}
      run: |
        npm install --prefix ${{ github.action_path }} @octokit/rest@19.0.3
        npm install --prefix ${{ github.action_path }} @actions/cache
        node ${{ github.action_path }}/feedback.mjs
          
    # - run: |
    #     node -e "
    #     console.log('pipoca');
    #     "
    # - name: Feedback comment
    #   uses: actions/github-script@v6.1.0
    #   with:
    #     github-token: ${{ inputs.github_token }}
    #     script: |
    #       const actionPath = "${{ github.action_path }}";
    #       const coverageTool = "${{ inputs.coverage_tool }}".toLowerCase();

    #       const defaultBranch = "${{ github.event.repository.default_branch }}";
    #       const currentBranch = "${{ steps.extract_branch.outputs.branch }}";
    #       const runId = "${{ github.run_id }}";

    #       const githubCache = require("@actions/cache");

    #       const script = require(`${actionPath}/script.js`);
    #       await script({
    #         core,
    #         github,
    #         runId,
    #         defaultBranch,
    #         currentBranch,
    #         githubCache,
    #         context,
    #         coverageTool,
    #         coverageThreshold: ${{ inputs.coverage_threshold }},
    #       });
